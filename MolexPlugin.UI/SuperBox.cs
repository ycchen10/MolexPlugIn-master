//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\ycchen10\OneDrive - kochind.com\Desktop\MolexPlugIn-12.0\UI\SuperBox.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: ycchen10
//              Version: NX 11
//              Date: 02-19-2020  (Format: mm-dd-yyyy)
//              Time: 11:47 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Utilities;
using MolexPlugin.DAL;
using NXOpen.UF;
using Basic;

namespace MolexPlugin
{


    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    public class SuperBox
    {
        //class members
        private static Session theSession = null;
        private static UFSession theUFSession = null;
        private static UI theUI = null;
        private string theDlxFileName;
        private NXOpen.BlockStyler.BlockDialog theDialog;
        private NXOpen.BlockStyler.Group group0;// Block type: Group
        private NXOpen.BlockStyler.Enumeration type;// Block type: Enumeration
        private NXOpen.BlockStyler.Group group;// Block type: Group
        private NXOpen.BlockStyler.SelectObject selectObject;// Block type: Selection
        private NXOpen.BlockStyler.SpecifyOrientation manip;// Block type: Specify Orientation
        private NXOpen.BlockStyler.SpecifyVector vector;// Block type: Specify Vector
        private NXOpen.BlockStyler.Group group1;// Block type: Group
        private NXOpen.BlockStyler.Toggle boolOffset;// Block type: Toggle
        private NXOpen.BlockStyler.LinearDimension dimOffset;// Block type: Linear Dim
        private NXOpen.BlockStyler.Group group5;// Block type: Group
        private NXOpen.BlockStyler.LinearDimension positiveX;// Block type: Linear Dim
        private NXOpen.BlockStyler.LinearDimension negativeX;// Block type: Linear Dim
        private NXOpen.BlockStyler.LinearDimension positiveY;// Block type: Linear Dim
        private NXOpen.BlockStyler.LinearDimension negativeY;// Block type: Linear Dim
        private NXOpen.BlockStyler.LinearDimension negativeZ;// Block type: Linear Dim
        private NXOpen.BlockStyler.LinearDimension positiveZ;// Block type: Linear Dim
        private NXOpen.BlockStyler.LinearDimension radial;// Block type: Linear Dim
        private NXOpen.BlockStyler.Group group2;// Block type: Group
        private NXOpen.BlockStyler.Toggle boolHide;// Block type: Toggle
        private NXOpen.BlockStyler.Toggle boolUnite;// Block type: Toggle
        private NXOpen.BlockStyler.Toggle boolPlane;// Block type: Toggle
        private NXOpen.BlockStyler.Toggle boolSurface;// Block type: Toggle
        private NXOpen.BlockStyler.Group group3;// Block type: Group
        private NXOpen.BlockStyler.IntegerBlock intTranslucency;// Block type: Integer
        private NXOpen.BlockStyler.IntegerBlock intLayer;// Block type: Integer
        private NXOpen.BlockStyler.ObjectColorPicker intColor;// Block type: Color Picker
        private NXOpen.BlockStyler.Group group4;// Block type: Group
        private NXOpen.BlockStyler.Button bttPreview;// Block type: Button
        private NXOpen.BlockStyler.Label strPreview;// Block type: Label
        private AbstractSuperBox superBox = null; //方块盒
        private double[] blockOffset = new double[6]; //长方形偏置
        private double[] cylinderOffset = new double[3]; //圆柱形偏置
        private List<NXObject> seleTags = new List<NXObject>(); //选择
        private Matrix4 matr = new Matrix4(); //矩阵
        private bool preview = true; //预览
        private List<NXObject> prtviewFeature = new List<NXObject>(); //预览特征
        //------------------------------------------------------------------------------
        //Constructor for NX Styler class
        //------------------------------------------------------------------------------
        public SuperBox()
        {
            try
            {
                theSession = Session.GetSession();
                theUFSession = UFSession.GetUFSession();
                theUI = UI.GetUI();
                theDlxFileName = "SuperBox.dlx";
                theDialog = theUI.CreateDialog(theDlxFileName);
                theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
                theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
                theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
                theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
                theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
                theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
                theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));

            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                throw ex;
            }
        }

        //------------------------------------------------------------------------------
        //This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            try
            {
                theDialog.Show();
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Method Name: Dispose
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            if (theDialog != null)
            {
                theDialog.Dispose();
                theDialog = null;
            }
        }

        //------------------------------------------------------------------------------
        //---------------------Block UI Styler Callback Functions--------------------------
        //------------------------------------------------------------------------------

        //------------------------------------------------------------------------------
        //Callback Name: initialize_cb
        //------------------------------------------------------------------------------
        public void initialize_cb()
        {
            try
            {
                group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
                type = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("type");
                group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
                selectObject = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("selectObject");
                manip = (NXOpen.BlockStyler.SpecifyOrientation)theDialog.TopBlock.FindBlock("manip");
                vector = (NXOpen.BlockStyler.SpecifyVector)theDialog.TopBlock.FindBlock("vector");
                group1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group1");
                boolOffset = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("boolOffset");
                dimOffset = (NXOpen.BlockStyler.LinearDimension)theDialog.TopBlock.FindBlock("dimOffset");
                group5 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group5");
                positiveX = (NXOpen.BlockStyler.LinearDimension)theDialog.TopBlock.FindBlock("positiveX");
                negativeX = (NXOpen.BlockStyler.LinearDimension)theDialog.TopBlock.FindBlock("negativeX");
                positiveY = (NXOpen.BlockStyler.LinearDimension)theDialog.TopBlock.FindBlock("positiveY");
                negativeY = (NXOpen.BlockStyler.LinearDimension)theDialog.TopBlock.FindBlock("negativeY");
                negativeZ = (NXOpen.BlockStyler.LinearDimension)theDialog.TopBlock.FindBlock("negativeZ");
                positiveZ = (NXOpen.BlockStyler.LinearDimension)theDialog.TopBlock.FindBlock("positiveZ");
                radial = (NXOpen.BlockStyler.LinearDimension)theDialog.TopBlock.FindBlock("radial");
                group2 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group2");
                boolHide = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("boolHide");
                boolUnite = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("boolUnite");
                boolPlane = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("boolPlane");
                boolSurface = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("boolSurface");
                group3 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group3");
                intTranslucency = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("intTranslucency");
                intLayer = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("intLayer");
                intColor = (NXOpen.BlockStyler.ObjectColorPicker)theDialog.TopBlock.FindBlock("intColor");
                group4 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group4");
                bttPreview = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("bttPreview");
                strPreview = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("strPreview");
                #region 选择过滤
                Selection.MaskTriple maskFace = new Selection.MaskTriple() //面
                {
                    Type = 70,
                    Subtype = 2,
                    SolidBodySubtype = UFConstants.UF_UI_SEL_FEATURE_ANY_FACE
                };
                Selection.MaskTriple maskPoint = new Selection.MaskTriple() //点
                {
                    Type = 2,
                    Subtype = 0,
                    SolidBodySubtype = 0
                };
                Selection.MaskTriple maskCurve = new Selection.MaskTriple() //线
                {
                    Type = 3,
                    Subtype = 0,
                    SolidBodySubtype = 0
                };
                Selection.MaskTriple maskEdge = new Selection.MaskTriple() //边
                {
                    Type = 70,
                    Subtype = 3,
                    SolidBodySubtype = UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE
                };

                Selection.MaskTriple[] masks = { maskFace, maskPoint, maskCurve, maskEdge };
                selectObject.SetSelectionFilter(Selection.SelectionAction.ClearAndEnableSpecific, masks);//过滤只选择点和面
                #endregion


                SetLinearDimensionShow(false);
                radial.Show = false;

            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: dialogShown_cb
        //This callback is executed just before the dialog launch. Thus any value set 
        //here will take precedence and dialog will be launched showing that value. 
        //------------------------------------------------------------------------------
        public void dialogShown_cb()
        {
            try
            {
                //---- Enter your callback code here -----
                #region 初始化
                SetUiInitialize();
                SetLinearDimensionDouble(0);
                if (boolOffset.Value)
                {
                    dimOffset.Enable = true;
                }
                else
                    dimOffset.Enable = false;
                bttPreview.Enable = false;

                bttPreview.Bitmap = "general_preview";

                strPreview.Label = "Show Result";
                #endregion
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: apply_cb
        //------------------------------------------------------------------------------
        public int apply_cb()
        {
            int errorCode = 0;
            try
            {
                //---- Enter your callback code here -----if (preview)
                if (preview)
                {
                    if (boolUnite.Value)
                    {
                        prtviewFeature.Add(CreateBooleanFeature());
                    }
                    if (boolPlane.Value)
                    {
                        prtviewFeature.AddRange(Trim(seleTags, superBox.ToolingBox.GetBodies()[0]));
                    }
                    if (boolHide.Value)
                    {
                        AskSelectParent().Unblank();
                    }
                }
                this.seleTags.Clear();
                this.prtviewFeature.Clear();
                superBox = null;
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Callback Name: update_cb
        //------------------------------------------------------------------------------
        public int update_cb(NXOpen.BlockStyler.UIBlock block)
        {
            try
            {

                if (block == type)
                {
                    //---------Enter your code here-----------
                    if (superBox != null)
                    {
                        superBox.DeleToolingBoxFeatures();
                        superBox = null;
                        bttPreview.Enable = false;
                    }
                    if (selectObject.GetSelectedObjects().Length != 0)
                    {
                        seleTags.Clear();
                        selectObject.SetSelectedObjects(seleTags.ToArray());
                    }
                    SetLinearDimensionShow(false);
                    negativeZ.Show = false;
                    positiveZ.Show = false;
                    radial.Show = false;
                    SetUiInitialize();

                }
                else if (block == selectObject)
                {
                    //---------Enter your code here-----------
                    seleTags.Clear();
                    bttPreview.Enable = true;
                    foreach (TaggedObject to in selectObject.GetSelectedObjects())
                    {
                        seleTags.Add(to as NXObject);
                    }

                    if (superBox == null)
                    {
                        if (type.ValueAsString == "块")
                        {
                            superBox = new SuperBoxBlock(blockOffset, seleTags);
                            SetLinearDimensionShow(true);
                        }

                        else
                        {
                            superBox = new SuperBoxCylinder(cylinderOffset, seleTags);
                            negativeZ.Show = true;
                            positiveZ.Show = true;
                            radial.Show = true;
                        }

                        superBox.CreateSuperBox();
                    }
                    else
                    {
                        superBox.Update(seleTags);
                    }
                    matr = superBox.Matr;
                    if (superBox.ToolingBox != null)
                    {
                        superBox.UpdateSpecify(manip);
                        bttPreview.Enable = true;
                        superBox.SetColor(intColor.GetValue()[0]);
                        SetDimForFace();
                        superBox.SetTranslucency(intTranslucency.Value);
                        superBox.SetLayer(intLayer.Value);
                    }
                }
                else if (block == manip)
                {
                    //---------Enter your code here-----------
                    if (superBox != null)
                    {
                        matr.Identity();
                        matr.TransformToZAxis(manip.Origin, manip.XAxis, manip.YAxis);
                        superBox.Update(matr, blockOffset);
                        SetDimForFace();
                    }

                }
                else if (block == vector)
                {
                    //---------Enter your code here-----------
                    if (superBox != null)
                    {
                        matr.Identity();
                        matr.TransformToZAxis(vector.Point, vector.Vector);
                        superBox.Update(matr, cylinderOffset);
                        SetDimForFace();
                    }
                }
                else if (block == boolOffset)
                {
                    //---------Enter your code here-----------
                    if (boolOffset.Value)
                    {
                        dimOffset.Enable = true;
                    }
                    else
                        dimOffset.Enable = false;
                }
                else if (block == dimOffset)
                {
                    //---------Enter your code here-----------
                    SetUiInitialize();
                    SetLinearDimensionDouble(0);
                    if (superBox != null)
                    {
                        if (type.ValueAsString == "块")
                            superBox.Update(this.matr, this.blockOffset);
                        else
                            superBox.Update(this.matr, this.cylinderOffset);
                    }
                }
                else if (block == positiveX)
                {
                    //---------Enter your code here-----------
                    SetDimFeatuer(positiveX, 0, ref blockOffset);
                }
                else if (block == negativeX)
                {
                    //---------Enter your code here-----------
                    SetDimFeatuer(negativeX, 1, ref blockOffset);
                }
                else if (block == positiveY)
                {
                    //---------Enter your code here-----------
                    SetDimFeatuer(positiveY, 2, ref blockOffset);
                }
                else if (block == negativeY)
                {
                    //---------Enter your code here-----------
                    SetDimFeatuer(negativeY, 3, ref blockOffset);
                }

                else if (block == positiveZ)
                {
                    //---------Enter your code here-----------
                    if (type.ValueAsString == "块")
                    {
                        SetDimFeatuer(positiveZ, 4, ref blockOffset);
                    }
                    else
                    {
                        SetDimFeatuer(positiveZ, 0, ref cylinderOffset);
                    }
                }
                else if (block == negativeZ)
                {
                    //---------Enter your code here-----------
                    if (type.ValueAsString == "块")
                    {
                        SetDimFeatuer(negativeZ, 5, ref blockOffset);
                    }
                    else
                    {
                        SetDimFeatuer(negativeZ, 1, ref cylinderOffset);
                    }

                }
                else if (block == radial)
                {
                    //---------Enter your code here-----------
                    SetDimFeatuer(radial, 2, ref cylinderOffset);
                }
                else if (block == boolHide)
                {
                    //---------Enter your code here-----------
                }
                else if (block == boolUnite)
                {
                    //---------Enter your code here-----------
                }
                else if (block == boolPlane)
                {
                    //---------Enter your code here-----------
                    if (boolPlane.Value)
                        boolSurface.Value = false;
                }
                else if (block == boolSurface)
                {
                    //---------Enter your code here-----------
                    if (boolSurface.Value)
                        boolPlane.Value = false;
                }
                else if (block == intTranslucency)
                {
                    //---------Enter your code here-----------
                    if (superBox != null)
                        superBox.SetTranslucency(intTranslucency.Value);
                }
                else if (block == intLayer)
                {
                    //---------Enter your code here-----------
                    if (superBox != null)
                        superBox.SetLayer(intLayer.Value);
                }
                else if (block == intColor)
                {
                    //---------Enter your code here-----------
                    if (superBox != null)
                        superBox.SetColor(intColor.GetValue()[0]);
                }
                else if (block == bttPreview)
                {
                    //---------Enter your code here-----------
                    if (superBox != null)
                    {


                        if (preview)
                        {
                            if (boolUnite.Value)
                            {
                                prtviewFeature.Add(CreateBooleanFeature());
                            }
                            if (boolPlane.Value)
                            {
                                prtviewFeature.AddRange(Trim(seleTags, superBox.ToolingBox.GetBodies()[0]));
                            }
                            if (boolHide.Value)
                            {
                                AskSelectParent().Unblank();
                            }
                            bttPreview.Bitmap = "undo";
                            strPreview.Label = "Undo Result";
                            preview = false;

                        }
                        else
                        {
                            if (prtviewFeature.Count != 0 || prtviewFeature != null)
                                DeleteObject.Delete(prtviewFeature.ToArray());
                            prtviewFeature.Clear();
                            bttPreview.Bitmap = "general_preview";
                            strPreview.Label = "Show Result";
                            preview = true;
                        }

                    }

                }
                else if (block == strPreview)
                {
                    //---------Enter your code here-----------
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Callback Name: ok_cb
        //------------------------------------------------------------------------------
        public int ok_cb()
        {
            int errorCode = 0;
            try
            {
                errorCode = apply_cb();
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Callback Name: filter_cb 过滤选择
        //------------------------------------------------------------------------------
        public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
        {
            if (superBox != null && superBox.ToolingBox != null) //边界盒没高度
            {
                if (selectedObject is Face)
                {
                    Face face = selectedObject as Face;
                    if (face.GetBody().Tag == superBox.ToolingBox.GetBodies()[0].Tag)
                        return UFConstants.UF_UI_SEL_REJECT;
                }
                if (selectedObject is Edge)
                {
                    Edge edge = selectedObject as Edge;
                    if (edge.GetBody().Tag == superBox.ToolingBox.GetBodies()[0].Tag)
                        return UFConstants.UF_UI_SEL_REJECT;
                }
                if (selectedObject is Point)
                {
                    Point pt = selectedObject as Point;
                    int parents;
                    Tag[] parentTags;
                    Tag bodyTag = Tag.Null;
                    int type;
                    int subtype;
                    theUFSession.So.AskParents(pt.Tag, UFConstants.UF_SO_ASK_ALL_PARENTS, out parents, out parentTags);
                    for (int i = 0; i < parents; i++)
                    {
                        theUFSession.Obj.AskTypeAndSubtype(parentTags[i], out type, out subtype);
                        if (type == UFConstants.UF_solid_type)
                        {
                            theUFSession.Modl.AskEdgeBody(parentTags[i], out bodyTag);
                            if (bodyTag == superBox.ToolingBox.GetBodies()[0].Tag)
                                return UFConstants.UF_UI_SEL_REJECT;
                        }
                    }
                }
            }
            return (NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
        }

        //------------------------------------------------------------------------------
        //Callback Name: focusNotify_cb
        //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
        //------------------------------------------------------------------------------
        public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
        {
            try
            {
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Function Name: GetBlockProperties
        //Returns the propertylist of the specified BlockID
        //------------------------------------------------------------------------------
        public PropertyList GetBlockProperties(string blockID)
        {
            PropertyList plist = null;
            try
            {
                plist = theDialog.GetBlockProperties(blockID);
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return plist;
        }
        #region 私有函数
        /// <summary>
        /// 设置尺寸显示
        /// </summary>
        /// <param name="show"></param>
        private void SetLinearDimensionShow(bool show)
        {
            this.positiveX.Show = show;
            this.positiveY.Show = show;
            this.positiveZ.Show = show;
            this.negativeX.Show = show;
            this.negativeY.Show = show;
            this.negativeZ.Show = show;
        }

        private void SetLinearDimensionDouble(double value)
        {
            this.positiveX.Value = value;
            this.positiveY.Value = value;
            this.positiveZ.Value = value;
            this.negativeX.Value = value;
            this.negativeY.Value = value;
            this.negativeZ.Value = value;
            this.radial.Value = value;
        }
        /// <summary>
        /// 初始对话显示
        /// </summary>
        private void SetUiInitialize()
        {
            if (type.ValueAsString == "块")
            {
                vector.Show = false;
                manip.Show = true;
                manip.Enable = true;
                for (int i = 0; i < 6; i++)
                {
                    blockOffset[i] = dimOffset.Value;
                }
            }
            if (type.ValueAsString == "圆柱")
            {
                vector.Show = true;
                manip.Show = false;
                for (int i = 0; i < 3; i++)
                {
                    cylinderOffset[i] = dimOffset.Value;
                }
            }


        }
        /// <summary>
        ///设置面上的向量
        /// </summary>
        private void SetDimForFace()
        {
            superBox.SetDimForFace(ref this.positiveX, new Vector3d(1, 0, 0));
            superBox.SetDimForFace(ref this.negativeX, new Vector3d(-1, 0, 0));
            superBox.SetDimForFace(ref this.positiveY, new Vector3d(0, 1, 0));
            superBox.SetDimForFace(ref this.negativeY, new Vector3d(0, -1, 0));
            superBox.SetDimForFace(ref this.positiveZ, new Vector3d(0, 0, 1));
            superBox.SetDimForFace(ref this.negativeZ, new Vector3d(0, 0, -1));
            superBox.SetDimForFace(ref this.radial, new Vector3d(1, 1, 1));
        }
        /// <summary>
        /// 设置相同偏置
        /// </summary>
        /// <param name="dim"></param>
        /// <param name="offset"></param>
        private void SetDimSame(double dim, ref double[] offset)
        {
            for (int i = 0; i < offset.Length; i++)
            {
                offset[i] = dim;
            }
        }
        /// <summary>
        /// 设置拖拉预览
        /// </summary>
        /// <param name="ld"></param>
        private void SetDimFeatuer(LinearDimension ld, int row, ref double[] offset)
        {

            double temp = UMathUtils.GetDis(ld.HandleOrigin, superBox.CenterPt);     //判断拖拉是否超过边界     
            if (Math.Abs(ld.Value) >= 2 * temp && ld.Value < 0)
                return;
            if (boolOffset.Value)
            {
                SetDimSame(ld.Value, ref offset);
                dimOffset.Value = ld.Value;
                negativeX.Value = ld.Value;
                negativeY.Value = ld.Value;
                negativeZ.Value = ld.Value;

                positiveX.Value = ld.Value;
                positiveX.Value = ld.Value;
                positiveZ.Value = ld.Value;
            }
            else
                offset[row] = ld.Value;
            superBox.Update(matr, offset);
        }
        /// <summary>
        /// 创建平面相减
        /// </summary>
        /// <param name="seleTags"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private List<NXOpen.Features.TrimBody2> Trim(List<NXObject> seleTags, Body body)
        {
            List<Face> planeFace = new List<Face>();
            foreach (NXObject nb in seleTags)
            {
                if (nb is Face)
                {
                    Face face = nb as Face;
                    if (face.SolidFaceType == Face.FaceType.Planar)
                        planeFace.Add(face);
                }
            }
            if (planeFace != null || planeFace.Count != 0)
            {
                BoxTrimBodyBuilder builder = new BoxTrimBodyBuilder(planeFace, body);
                return builder.CreateBuilder();
            }
            return null;
        }
        /// <summary>
        /// 创建布尔减
        /// </summary>
        /// <returns></returns>
        private NXOpen.Features.BooleanFeature CreateBooleanFeature()
        {
            Body toolBody = AskSelectParent();


            if (toolBody != null && this.superBox.ToolingBox != null)
            {
                return BooleanUtils.CreateBooleanFeature(this.superBox.ToolingBox.GetBodies()[0], toolBody, true, NXOpen.Features.Feature.BooleanType.Subtract);
            }
            return null;
        }
        /// <summary>
        /// 获取选择的父项
        /// </summary>
        /// <returns></returns>
        private Body AskSelectParent()
        {
            Body parentBody = null;
            foreach (NXObject nt in this.seleTags)
            {
                if (nt is Edge)
                {
                    parentBody = (nt as Edge).GetBody();
                    break;
                }
                if (nt is Face)
                {
                    parentBody = (nt as Face).GetBody();
                    break;
                }
                if (nt is Point)
                {
                    Point pt = nt as Point;
                    int parents;
                    Tag[] parentTags;
                    Tag bodyTag = Tag.Null;
                    int type;
                    int subtype;
                    theUFSession.So.AskParents(pt.Tag, UFConstants.UF_SO_ASK_ALL_PARENTS, out parents, out parentTags);
                    for (int i = 0; i < parents; i++)
                    {
                        theUFSession.Obj.AskTypeAndSubtype(parentTags[i], out type, out subtype);
                        if (type == UFConstants.UF_solid_type)
                        {
                            theUFSession.Modl.AskEdgeBody(parentTags[i], out bodyTag);
                            parentBody = NXObjectManager.Get(bodyTag) as Body;
                            break;
                        }
                    }
                    break;
                }

            }

            return parentBody;
        }
        #endregion
    }
}
